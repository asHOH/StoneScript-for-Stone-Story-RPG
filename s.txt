/* ----- System variables and functions ----- */

/* ---------------- functions --------------- */
var cd = item.GetCooldown
var can_activate = item.CanActivate
var foe_count_within = foe.GetCount
var size = string.Size
var str_break = string.Break
var str_split = string.Split
var str_equals = string.Equals
var int_parse = int.Parse
var clamp = math.Clamp
var round_to_int = math.RoundToInt
var max = math.Max
var color_lerp = color.Lerp
var draw_BG = draw.Bg
var screen_next = screen.Next
var screen_reset_offset = screen.ResetOffset
var add_panel = ui.AddPanel
var add_text = ui.AddText


/* ---------------- const var --------------- */
var loc_ = loc // actually changes, but does not matter
var loc_name = loc.name // actually changes, but does not matter
var loc_stars = loc.stars
var screen_w = screen.w
var screen_h = screen.h
var is_first_trial = (loc.bestTime = -1)
var initial_best_time = loc.bestTime

/* -------------- loop-wise var ------------- */
var maxhp_ = maxhp // leveling up raises maxhp
var hp_last_loop = maxhp_
var hp_lost_total = 0
var best_time = initial_best_time
var avg_time = loc.averageTime
var new_best = false
var potion = item.potion

func on_loop()
  maxhp_ = maxhp
  hp_lost_total += max(hp_last_loop - hp_last_frame, 0)
  hp_last_loop = hp_
  best_time = loc.bestTime
  avg_time = loc.averageTime
  new_best = (best_time < initial_best_time)
  potion = item.potion


/* ------------- frame-wise var ------------- */
var ai_enabled = false
var is_walking = false
var can_activate_item = false
var left_state = 0
var right_state = 0
var has_pickup = false
var pos_x = 0
var screen_x = 0
var relative_x = 0

var hp_ = maxhp_
var hp_last_frame = maxhp_
var lost_hp = 0
var armor_ = 0.0
var buffs_count = 0
var buffs_string = ""
var buffs_smite = 0
var debuffs_count = 0
var debuffs_string = ""
var debuffs_chill = false

var foe_ = ""
var foe_count = 0
var all_foe_count = 0
var cur_screen_foe_count = 0
var foe_distance = 0
var foe_armor = 0
var foe_hp_and_armor = 0
var foe_has_armor = false
var foe_state = 0
var foe_time = 0
var foe_buff_count = 0
var foe_buff_string = ""
var foe_debuff_count = 0
var foe_debuff_string = ""
var foe_debuff_f = false
var foe_debuff_F = false
var foe_debuff_P = false
var foe_debuff_I = false
var foe_debuff_I_count = 0
var foe_debuff_I_time = 0
var foe_debuff_F_time = 0
var foe_debuff_P_time = 0


var loop_count = 1
var total_time_last_frame = 0
var total_time = 0
var true_total_time = 0
var loc_begin = true
var loc_loop = false
var loc_begin_or_loop = true


func on_start_frame()
  ai_enabled = ai.enabled & !(ai.paused)
  is_walking = ai.walking
  can_activate_item = can_activate()
  left_state = item.left.state
  right_state = item.right.state
  has_pickup = pickup.distance < 10
  pos_x = pos.x
  screen_x = screen.x
  relative_x = pos_x - screen_x
  hp_last_frame = hp_
  hp_ = hp
  lost_hp = maxhp_ - hp_
  armor_ = armor + armor.f / 10.0
  buffs_count = buffs.count
  buffs_string = buffs.string
  buffs_smite = (buffs_string = "smite:")
  debuffs_count = debuffs.count
  debuffs_string = debuffs.string
  debuffs_chill = (debuffs_string = "chill:")
  foe_ = foe
  foe_count = foe.count
  all_foe_count = foe_count_within(200)
  cur_screen_foe_count = foe_count_within(36 - relative_x)
  foe_distance = foe.distance
  foe_armor = foe.armor
  foe_hp_and_armor = foe.hp + foe_armor
  foe_has_armor = foe_armor > 0
  foe_state = foe.state
  foe_time = foe.time
  foe_buff_count = foe.buffs.count
  foe_buff_string = foe.buffs.string
  foe_debuff_count = foe.debuffs.count
  foe_debuff_string = foe.debuffs.string
  foe_debuff_f = (foe_debuff_string = "dot_2:")
  foe_debuff_F = (foe_debuff_string = "dot:")
  foe_debuff_P = (foe_debuff_string = "damage:")
  foe_debuff_I = (foe_debuff_string = "chill:")

  ?foe_debuff_I
    foe_debuff_I_count = int_parse(str_break(str_split(foe_debuff_string, "chill:")[1], 1)[0])
    foe_debuff_I_time = int_parse(str_split(str_split(str_split(foe_debuff_string, "chill:")[1], ":")[1], ",")[0])
  :
    foe_debuff_I_count = 0
    foe_debuff_I_time = 0
  ?foe_debuff_F
    foe_debuff_F_time = int_parse(str_split(str_split(str_split(foe_debuff_string, "dot:")[1], ":")[1], ",")[0])
  :
    foe_debuff_F_time = 0
  ?foe_debuff_P
    foe_debuff_P_time = int_parse(str_split(str_split(str_split(foe_debuff_string, "damage:")[1], ":")[1], ",")[0])
  :
    foe_debuff_P_time = 0

  total_time_last_frame = total_time
  total_time = totaltime  
  ?total_time > total_time_last_frame
    true_total_time += total_time - total_time_last_frame  //make up for the skills such as blade
  :
    true_total_time++  
  loc_begin = (true_total_time = 1)
  loc_loop = (total_time = 1) & (true_total_time > 1)
  loc_begin_or_loop = loc_begin | loc_loop

  ?loc_loop
    on_loop()
    loop_count++

func can_activate_now(item_name)
  return cd(item_name) <= 0 & ai_enabled & can_activate_item

func activate_potion()
  ?potion ! "empty"
    activate potion
    potion = "empty"

func foe_state_at(s, t)
  return foe_state = s & foe_time = t

func foe_state_between(s, t1, t2)
  return foe_state = s & foe_time >= t1 & foe_time <= t2

/* -------------- pad functions ------------- */
func pad_left(str, l)
  str = str + ""
  var pad_len = l - size(str)
  var pad = ""
  ?pad_len > 0
    for i = 1..pad_len
      pad += " "
  return pad + str


func pad_right(str, l)
  str = str + ""
  var pad_len = l - size(str)
  var pad = ""
  ?pad_len > 0
    for i = 1..pad_len
      pad += " "
  return str + pad

func create_ui(UI, x, y, w)
  UI.x = x
  UI.y = y
  UI.w = w
  UI.dock = top_left
  UI.anchor = top_left
  return UI